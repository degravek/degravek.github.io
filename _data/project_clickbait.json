{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction\n",
    "In today's age of information, we are constantly bombarded with advertisements and news headlines of various kinds on virtually every web page we visit.\n",
    "\n",
    "Sites competing for viewers, and so they are pushed to produce ever more interesting and provacative headlines. Sites like BuzzFeed are known for this.\n",
    "\n",
    "We must make a distinction here between fake news and clickbait. Though there really isn't any formal definition of what constitutes a clickbait headline per se, but the Oxford English Dictionary defines it as\n",
    "\n",
    "* On the internet, content whose main purpose is to attract attention and encourage visitors to click on a link to a particular web page.\n",
    "\n",
    "misleading or not whole story.\n",
    "\n",
    "Clickbait headlines, in a general sense, are those which satisfy two main criteria: they\n",
    "1. Exploit the so-called \"curiosity gap\" by not explaining the full article contents\n",
    "2. Provide misleading information about the article contents\n",
    "\n",
    "Examples of clickbait headline include things like\n",
    "\n",
    "* I left my husband and daughter home alone, and you'll never believe what happened!\n",
    "* 19 Tweets anyone addicted to diet coke will totally relate to\n",
    "* What these pilots do with dogs is the most brilliant thing I've ever seen\n",
    "* She picks this tiny object off the ground, but watch what happens when it starts to move!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from nltk.stem.wordnet import WordNetLemmatizer\n",
    "from sklearn.grid_search import GridSearchCV\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from nltk.stem.porter import PorterStemmer\n",
    "from sklearn.metrics import roc_auc_score\n",
    "from sklearn.metrics import roc_curve\n",
    "from sklearn.pipeline import Pipeline\n",
    "from nltk.corpus import stopwords\n",
    "from string import punctuation\n",
    "import seaborn as sns\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import nltk\n",
    "import re\n",
    "\n",
    "import matplotlib.pyplot as mp\n",
    "%matplotlib inline\n",
    "\n",
    "file = '/Users/degravek/Downloads/clickbait_data.txt'\n",
    "with open(file, encoding=\"utf-8\") as f_in:\n",
    "    lines = [line.rstrip() for line in f_in]\n",
    "    ybait = list([line for line in lines if line])\n",
    "\n",
    "df_ycb = pd.DataFrame(ybait, columns=['text'])\n",
    "df_ycb['clickbait'] = 1\n",
    "\n",
    "file = '/Users/degravek/Downloads/non_clickbait_data.txt'\n",
    "with open(file, encoding=\"utf-8\") as f_in:\n",
    "    lines = [line.rstrip() for line in f_in]\n",
    "    nbait = list([line for line in lines if line])\n",
    "\n",
    "df_ncb = pd.DataFrame(nbait, columns=['text'])\n",
    "df_ncb['clickbait'] = 0\n",
    "\n",
    "df = df_ycb.append(df_ncb, ignore_index=True).reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feature Engineering\n",
    "Now that the data is loaded, one option is to move ahead using only the headline text to identify clickbait headlines. It turns out that this actually gives very good results. However, it is also possible to engineer some new features from the available data. These new features include things like:\n",
    "\n",
    "* Number of words in the headline\n",
    "* Number of characters in the headline\n",
    "* Number of stop words in the headline\n",
    "* Number of contractions in the headline\n",
    "* Is the headline a question?\n",
    "* Ratio of stop words to total number of words\n",
    "* Ratio of contractions to total number of words\n",
    "\n",
    "To produce these new features, we'll first need to define a few functions. The function process_text carries out the tast of processing the raw headlines. It makes every headline lowercase, removes any punctuation and extra white space, and replaces any numerical values with the word \"number\". Next, the function cnt_stop_words tokenizes (splits) each headline into it's individual words, and counts the number words that appear in the NLTK corpus of pre-defined stop words.\n",
    "\n",
    "It is often the case that clickbait headlines are stated in the form of a question. For example, something like \"Can you spot the amazing thing in this photo?\". Since the particular dataset we're using doesn't actually contain punctuation like question marks, we can try to determine if the text is stated as a question based on the first word in the headline. Questions typically start with words like \"who\", \"what\", \"when\", \"can\", etc. To this end, we can define a list of \"question_words\", and a function to check if any of these words starts a headline.\n",
    "\n",
    "Clickbait headlines also tend to contain more informal writing than traditional news headlines. As such, they may contain many more contractions, occurrences of slang, etc. Below, we can make a list of possible contractions to look for, as well as a function to carry this out.\n",
    "\n",
    "Lastly, a function is defined to check the part-of-speech of each word in a headline. It's possible that traditional news headlines contain, for example, more nouns than do clickbait headlines. This part-of-speech tagging is carried out using methods from the NLTK package."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "question_words = ['who', 'whos', 'whose', 'what', 'whats', 'whatre', 'when', 'whenre', 'whens', 'couldnt',\n",
    "        'where', 'wheres', 'whered', 'why', 'whys', 'can', 'cant', 'could', 'will', 'would', 'is',\n",
    "        'isnt', 'should', 'shouldnt', 'you', 'your', 'youre', 'youll', 'youd', 'here', 'heres',\n",
    "        'how', 'hows', 'howd', 'this', 'are', 'arent', 'which', 'does', 'doesnt']\n",
    "\n",
    "contractions = ['tis', 'aint', 'amnt', 'arent', 'cant', 'couldve', 'couldnt', 'couldntve',\n",
    "                'didnt', 'doesnt', 'dont', 'gonna', 'gotta', 'hadnt', 'hadntve', 'hasnt',\n",
    "                'havent', 'hed', 'hednt', 'hedve', 'hell', 'hes', 'hesnt', 'howd', 'howll',\n",
    "                'hows', 'id', 'idnt', 'idntve', 'idve', 'ill', 'im', 'ive', 'ivent', 'isnt',\n",
    "                'itd', 'itdnt', 'itdntve', 'itdve', 'itll', 'its', 'itsnt', 'mightnt',\n",
    "                'mightve', 'mustnt', 'mustntve', 'mustve', 'neednt', 'oclock', 'ol', 'oughtnt',\n",
    "                'shant', 'shed', 'shednt', 'shedntve', 'shedve', 'shell', 'shes', 'shouldve',\n",
    "                'shouldnt', 'shouldntve', 'somebodydve', 'somebodydntve', 'somebodys',\n",
    "                'someoned', 'someonednt', 'someonedntve', 'someonedve', 'someonell', 'someones',\n",
    "                'somethingd', 'somethingdnt', 'somethingdntve', 'somethingdve', 'somethingll',\n",
    "                'somethings', 'thatll', 'thats', 'thatd', 'thered', 'therednt', 'theredntve',\n",
    "                'theredve', 'therere', 'theres', 'theyd', 'theydnt', 'theydntve', 'theydve',\n",
    "                'theydvent', 'theyll', 'theyontve', 'theyre', 'theyve', 'theyvent', 'wasnt',\n",
    "                'wed', 'wedve', 'wednt', 'wedntve', 'well', 'wontve', 'were', 'weve', 'werent',\n",
    "                'whatd', 'whatll', 'whatre', 'whats', 'whatve', 'whens', 'whered', 'wheres',\n",
    "                'whereve', 'whod', 'whodve', 'wholl', 'whore', 'whos', 'whove', 'whyd', 'whyre',\n",
    "                'whys', 'wont', 'wontve', 'wouldve', 'wouldnt', 'wouldntve', 'yall', 'yalldve',\n",
    "                'yalldntve', 'yallll', 'yallont', 'yallllve', 'yallre', 'yallllvent', 'yaint',\n",
    "                'youd', 'youdve', 'youll', 'youre', 'yourent', 'youve', 'youvent']\n",
    "\n",
    "def process_text(text):\n",
    "    result = text.replace('/', '').replace('\\n', '')\n",
    "    result = re.sub(r'[1-9]+', 'number', result)\n",
    "    result = re.sub(r'(\\w)(\\1{2,})', r'\\1', result)\n",
    "    result = re.sub(r'(?x)\\b(?=\\w*\\d)\\w+\\s*', '', result)\n",
    "    result = ''.join(t for t in result if t not in punctuation)\n",
    "    result = re.sub(r' +', ' ', result).lower().strip()\n",
    "    return result\n",
    "\n",
    "stop = stopwords.words('english')\n",
    "def cnt_stop_words(text):\n",
    "    s = text.split()\n",
    "    num = len([word for word in s if word in stop])\n",
    "    return num\n",
    "\n",
    "def num_contract(text):\n",
    "    s = text.split()\n",
    "    num = len([word for word in s if word in contractions])\n",
    "    return num\n",
    "\n",
    "def question_word(text):\n",
    "    s = text.split()\n",
    "    if s[0] in words:\n",
    "        return 1\n",
    "    else:\n",
    "        return 0\n",
    "\n",
    "def part_of_speech(text):\n",
    "    s = text.split()\n",
    "    nonstop = [word for word in s if word not in stop]\n",
    "    pos = [part[1] for part in nltk.pos_tag(nonstop)]\n",
    "    pos = ' '.join(pos)\n",
    "    return pos"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With our functions defined, let's apply them to the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df['text']     = df['text'].apply(process_text)\n",
    "df['question'] = df['text'].apply(question_word)\n",
    "\n",
    "df['num_words']       = df['text'].apply(lambda x: len(x.split()))\n",
    "df['num_stop_words']  = df['text'].apply(cnt_stop_words)\n",
    "df['num_contract']    = df['text'].apply(num_contract)\n",
    "df['stop_word_ratio'] = df['num_stop_words']/df['num_words']\n",
    "df['contract_ratio']  = df['num_contract']/df['num_words']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here's what the data look like."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>clickbait</th>\n",
       "      <th>question</th>\n",
       "      <th>num_words</th>\n",
       "      <th>stop_word_ratio</th>\n",
       "      <th>contract_ratio</th>\n",
       "      <th>num_stop_words</th>\n",
       "      <th>num_contract</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>should i get bings</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>which tv female friend group do you belong in</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>0.444444</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>the new star wars the force awakens trailer is...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>0.428571</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>this vine of new york on celebrity big brother...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>a couple did a stunning photo shoot with their...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                text  clickbait  question  \\\n",
       "0                                 should i get bings          1         1   \n",
       "1      which tv female friend group do you belong in          1         1   \n",
       "2  the new star wars the force awakens trailer is...          1         0   \n",
       "3  this vine of new york on celebrity big brother...          1         1   \n",
       "4  a couple did a stunning photo shoot with their...          1         0   \n",
       "\n",
       "   num_words  stop_word_ratio  contract_ratio  num_stop_words  num_contract  \n",
       "0          4         0.500000             0.0               2             0  \n",
       "1          9         0.444444             0.0               4             0  \n",
       "2         14         0.428571             0.0               6             0  \n",
       "3         12         0.333333             0.0               4             0  \n",
       "4         18         0.500000             0.0               9             0  "
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's plot some of these columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x113db82b0>"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1125d5f98>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "figure, axes = mp.subplots(nrows=2, ncols=2, figsize=(12,12))\n",
    "\n",
    "plot = df.groupby('question')['clickbait'].value_counts().unstack().plot.bar(ax=axes[0,0], rot=0)\n",
    "plot.set_xlabel('Headline Question')\n",
    "plot.set_ylabel('Number of Headlines')\n",
    "\n",
    "plot = df.groupby('num_words')['clickbait'].value_counts().unstack().plot.bar(ax=axes[0,1], rot=0)\n",
    "plot.set_xlabel('Number of Words')\n",
    "plot.set_ylabel('Number of Headlines')\n",
    "\n",
    "plot = df.groupby('num_stop_words')['clickbait'].value_counts().unstack().plot.bar(ax=axes[1,0], rot=0)\n",
    "plot.set_xlabel('Number of Stop Words')\n",
    "plot.set_ylabel('Number of Headlines')\n",
    "\n",
    "plot = df.groupby('num_contract')['clickbait'].value_counts().unstack().plot.bar(ax=axes[1,1], rot=0)\n",
    "plot.set_xlabel('Number of Contractions')\n",
    "plot.set_ylabel('Number of Headlines')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Well, there definitely do appear to to be differences between the clickbait and non-clickbait headlines in terms of number of words, stop words, contractions, etc. As I suspected, clickbait headlines are much more likely to be phrased as a question. They also, on average, have more total words, more stop words, and more contractions.\n",
    "\n",
    "Let's check for collinearity in the numerical data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11577a7f0>"
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11eaf8588>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "figure, axes = mp.subplots(figsize=(10,8))\n",
    "sns.heatmap(df.drop(['text','clickbait'], axis=1).corr(), annot=True, vmax=1, linewidths=.5, cmap='Reds')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There does appear to some collinearity present, especially between num_words and num_stop_words, between num_stop_words and stop_word_ratio, and between num_contract and contract_ratio. These make sense. Such collinearity, however, could jeopardize our classifier. To this end, let's drop num_stop_words and num_contract from our dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df.drop(['num_stop_words','num_contract'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can split our data into training and test sets and get to classifying! We'll put 80% of the data into the training set, and 20% into the test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_train, df_test = train_test_split(df, test_size=0.2, random_state=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To convert the headline text into the numerical data necessary for classification, we can use Scikit-Learn's TfidfVectorizer. TF-IDF is short for term frequency-inverse document frequency. In essence, TF-IDF counts the number of occurrences of the words in each headline and weights these frequencies by their total number of occurrences across all headlines. The idea is that commonly occurring words like \"the\" and \"can\" appear so frequently that they are very likely to be unimportant in distinguishing between the two classes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "tfidf = TfidfVectorizer(min_df=3, max_features=None, strip_accents='unicode',\n",
    "                           analyzer='word', token_pattern=r'\\w{1,}', ngram_range=(1,5),\n",
    "                           use_idf=1, smooth_idf=1, sublinear_tf=1)\n",
    "\n",
    "X_train_text = tfidf.fit_transform(df_train['text'])\n",
    "X_test_text  = tfidf.transform(df_test['text'])"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "cvec = CountVectorizer()\n",
    "\n",
    "X_train_pos = cvec.fit_transform(df_train['part_speech'])\n",
    "X_test_pos  = cvec.transform(df_test['part_speech'])\n",
    "\n",
    "sc = StandardScaler(with_mean=False)\n",
    "X_train_pos_sc = sc.fit_transform(X_train_pos)\n",
    "X_test_pos_sc  = sc.transform(X_test_pos)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we will isolate the engineered features and scale their values so that they heave a mean of zero and unit standard deviation. This is necessary for many classifiers in order to obtain good results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X_train_val = df_train.drop(['clickbait','text'], axis=1).values\n",
    "X_test_val  = df_test.drop(['clickbait','text'], axis=1).values\n",
    "\n",
    "sc = StandardScaler()\n",
    "X_train_val_sc = sc.fit(X_train_val).transform(X_train_val)\n",
    "X_test_val_sc  = sc.transform(X_test_val)\n",
    "\n",
    "y_train = df_train['clickbait'].values\n",
    "y_test  = df_test['clickbait'].values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lastly, we can combine the new TF-IDF vectors with the scaled engineered features and store them as sparse arrays. This helps to save memory as the TF-IDF vectors are extremely large, but are composed mostly of zeros."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from scipy import sparse\n",
    "\n",
    "X_train = sparse.hstack([X_train_val_sc, X_train_text]).tocsr()\n",
    "X_test  = sparse.hstack([X_test_val_sc, X_test_text]).tocsr()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It turns out that logistic regression tends to give the best results for this classification problem. Below we can use GridSearchCV to find the best regularization parameter for the job."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 20 candidates, totalling 100 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 100 out of 100 | elapsed:   19.2s finished\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, error_score='raise',\n",
       "       estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n",
       "          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n",
       "          verbose=0, warm_start=False),\n",
       "       fit_params={}, iid=True, n_jobs=1,\n",
       "       param_grid=[{'C': array([   1.     ,    6.21053,   11.42105,   16.63158,   21.84211,\n",
       "         27.05263,   32.26316,   37.47368,   42.68421,   47.89474,\n",
       "         53.10526,   58.31579,   63.52632,   68.73684,   73.94737,\n",
       "         79.15789,   84.36842,   89.57895,   94.78947,  100.     ])}],\n",
       "       pre_dispatch='2*n_jobs', refit=True, scoring='accuracy', verbose=1)"
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "param_grid = [{'C': np.linspace(1,100,20)}]\n",
    "\n",
    "grid_cv = GridSearchCV(LogisticRegression(), param_grid, scoring='accuracy', cv=5, verbose=1)\n",
    "grid_cv.fit(X_train_text, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(grid_cv.best_params_)\n",
    "print(grid_cv.best_score_)\n",
    "\n",
    "{'C': 37.473684210526315}\n",
    "0.975078125"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "Five-fold cross-validation suggests that we obtain a classification accuracy of 97.5%. Not bad at all! We can now apply the classifier to our test data to make some final predictions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "model = LogisticRegression(penalty='l2', C=37.473684210526315)\n",
    "model = model.fit(X_train, y_train)\n",
    "predict = model.predict(X_test)\n",
    "\n",
    "print(classification_report(y_test, predict))\n",
    "\n",
    "             precision    recall  f1-score   support\n",
    "\n",
    "          0       0.97      0.98      0.98      3204\n",
    "          1       0.98      0.97      0.98      3196\n",
    "\n",
    "avg / total       0.98      0.98      0.98      6400"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The classification report gives\n",
    "\n",
    "* A precision value of 0.98\n",
    "* A recall value of 0.98\n",
    "* An F1-score of 0.98\n",
    "\n",
    "Let's plot the confusion matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x11ec14470>"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nKSNDU5KkjP4XTElyN6BUw2cAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1138abfd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "figure, axes = mp.subplots(figsize=(8,6))\n",
    "cm = confusion_matrix(y_test, predict).T\n",
    "cm = cm.astype('float')/cm.sum(axis=0)\n",
    "\n",
    "sns.heatmap(cm, annot=True, cmap='Blues');\n",
    "mp.xlabel('True Label')\n",
    "mp.ylabel('Predicted Label')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The confusion matrix suggests that we misclassify clickbait headlines twice as often as real news headlines. However, these error rates are extremely small. Now let's plot the corresponding ROC curve."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11f35dc88>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "figure, axes = mp.subplots(figsize=(6,6))\n",
    "fpr, tpr, thresholds = roc_curve(y_test, model.predict_proba(X_test)[:,1])\n",
    "roc_auc = roc_auc_score(y_test, predict)\n",
    "\n",
    "mp.plot(fpr, tpr, lw=1, label='AUC = %0.2f'%(roc_auc))\n",
    "mp.plot([0, 1], [0, 1], '--k', lw=1)\n",
    "mp.xlabel('False Positive Rate')\n",
    "mp.ylabel('True Positive Rate')\n",
    "mp.title('ROC')\n",
    "mp.legend(loc=\"lower right\", frameon = True).get_frame().set_edgecolor('black')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "If we split the headlines into separate clickbait and non-clickbait groups, we can use TF-IDF to compare which kinds of words occur more frequently among them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "tfidf_cb = TfidfVectorizer(min_df=3, max_features=None, strip_accents='unicode',\n",
    "                           analyzer='word', token_pattern=r'\\w{1,}', ngram_range=(1,3),\n",
    "                           use_idf=1, smooth_idf=1, sublinear_tf=1, stop_words='english')\n",
    "cb = tfidf_cb.fit_transform(df_train.loc[df['clickbait']==1, 'text'])\n",
    "\n",
    "tfidf_ncb = TfidfVectorizer(min_df=3, max_features=None, strip_accents='unicode',\n",
    "                           analyzer='word', token_pattern=r'\\w{1,}', ngram_range=(1,3),\n",
    "                           use_idf=1, smooth_idf=1, sublinear_tf=1, stop_words='english')\n",
    "ncb = tfidf_ncb.fit_transform(df_train.loc[df['clickbait']==0, 'text'])\n",
    "\n",
    "cb_values = cb.mean(axis=0).tolist()\n",
    "cb_names = tfidf_cb.get_feature_names()\n",
    "ncb_values = ncb.mean(axis=0).tolist()\n",
    "ncb_names = tfidf_ncb.get_feature_names()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can place the results in two dataframes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import itertools\n",
    "\n",
    "q_cb = pd.DataFrame()\n",
    "q_cb['names'] = cb_names\n",
    "q_cb['values'] = list(itertools.chain.from_iterable(cb_values))\n",
    "q_cb = q_cb.sort_values('values', ascending=True)\n",
    "\n",
    "q_ncb = pd.DataFrame()\n",
    "q_ncb['names'] = ncb_names\n",
    "q_ncb['values'] = list(itertools.chain.from_iterable(ncb_values))\n",
    "q_ncb = q_ncb.sort_values('values', ascending=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And plot the results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x11c709b00>"
      ]
     },
     "execution_count": 187,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n/wdUQaHJNXNGmwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x115412940>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "figure, axes = mp.subplots(nrows=1, ncols=2, figsize=(12,7))\n",
    "mp.tight_layout(8,1)\n",
    "\n",
    "plot = q_cb[-20:].plot.barh(x='names', y='values', ax=axes[0], rot=0)\n",
    "plot.set_xlabel('Mean tf-idf')\n",
    "plot.set_ylabel('Words')\n",
    "plot.set_title('Clickbait')\n",
    "\n",
    "plot = q_ncb[-20:].plot.barh(x='names', y='values', ax=axes[1], rot=0)\n",
    "plot.set_xlabel('Mean tf-idf')\n",
    "plot.set_ylabel('Words')\n",
    "plot.set_title('Non-Clickbait')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we may expect, the words are quite different between the two set. Clickbait headlines often contain catchy words like \"best\", \"new\", \"love\", etc., while real news headlines contain more serious topic like \"president\", \"iraq\", and \"government\".\n",
    "\n",
    "Let's take a look at the headlines we misclassified."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/degravek/anaconda/lib/python3.5/site-packages/ipykernel/__main__.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  if __name__ == '__main__':\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>clickbait</th>\n",
       "      <th>predict</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>12060</th>\n",
       "      <td>bruno mars might headline super bowl</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13695</th>\n",
       "      <td>priest reportedly suspended for riding a hover...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15652</th>\n",
       "      <td>night owls become early risers</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>759</th>\n",
       "      <td>number differences between snow days in canada...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4046</th>\n",
       "      <td>hear a clip of good charlottes comeback song</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29061</th>\n",
       "      <td>when words are worth a thousand pictures at ba...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21931</th>\n",
       "      <td>controversial rapper dethrones mariah carey fr...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2482</th>\n",
       "      <td>arjun kapoor was in neerja and no one noticed</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12222</th>\n",
       "      <td>fyi beans from even stevens is working at a ma...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13095</th>\n",
       "      <td>the pros and cons of living in florida</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    text  clickbait  predict\n",
       "12060               bruno mars might headline super bowl          1        0\n",
       "13695  priest reportedly suspended for riding a hover...          1        0\n",
       "15652                     night owls become early risers          1        0\n",
       "759    number differences between snow days in canada...          1        0\n",
       "4046        hear a clip of good charlottes comeback song          1        0\n",
       "29061  when words are worth a thousand pictures at ba...          0        1\n",
       "21931  controversial rapper dethrones mariah carey fr...          0        1\n",
       "2482       arjun kapoor was in neerja and no one noticed          1        0\n",
       "12222  fyi beans from even stevens is working at a ma...          1        0\n",
       "13095             the pros and cons of living in florida          1        0"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test['predict'] = predict\n",
    "\n",
    "df_test.loc[df_test['clickbait'] != df_test['predict'], ['text','clickbait','predict']][:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There actually appear to be many cases where a headline was deemed to be clickbait, though I personally would not have classified it as such. For example, the headline \"bruno mars migt headline superbowl\" was labeled as clickbait by the collectors of this dataset, though this seems to constitute a legitimate news headline."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "raw",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "#from sklearn.model_selection import cross_val_score\n",
    "#scores = cross_val_score(LogisticRegression(penalty='l2', C=30.526315789473685), X_train_text, y_train, cv=10) "
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "#np.mean(scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "#text = 'security budget shows soaring olympic costs'\n",
    "\n",
    "#s = text.split()\n",
    "#nonstop = [word for word in s if word not in stop]\n",
    "#pos = [part[1] for part in nltk.pos_tag(nonstop)]\n",
    "\n",
    "#cvec = CountVectorizer()\n",
    "#c = cvec.fit_transform([' '.join(pos)])\n",
    "#c.toarray()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "#from imblearn.over_sampling import SMOTE\n",
    "#sm = SMOTE(ratio=.02,kind='borderline1',random_state=0)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "#from keras.models import Sequential, Model"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "#from sklearn.decomposition import TruncatedSVD\n",
    "#from sklearn.manifold import TSNE\n",
    "\n",
    "#X_reduced = TruncatedSVD(n_components=50, random_state=0).fit_transform(X_train_text)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "#X_embedded = TSNE(n_components=2, perplexity=40, verbose=2).fit_transform(X_reduced)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "#mp.scatter(X_embedded[:12800,0], X_embedded[:12800,1], s=1)\n",
    "#mp.scatter(X_embedded[12800:,0], X_embedded[12800:,1], s=1)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
