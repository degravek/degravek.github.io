{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction\n",
    "The Federal National Mortgage Association (FNMA), also known as Fannie Mae, is a government sponsored corporation founded in 1938 whose primary purpose, according to Wikipedia, is \"to expand the secondary mortgage market by securitizing mortgages in the form of mortgage-backed securities, allowing lenders to reinvest their assets into more lending and in effect increasing the number of lenders in the mortgage market by reducing the reliance on locally based savings and loan associations.\" In short, Fannie Mae purchases mortgage loans from primary lenders like Bank of America and Wells Fargo, among several others. After these mortgages are acquired, Fannie Mae sells them as securities in the bond market. According to this source, these sales \"provide lenders with the liquidity to fund more mortgages, and until 2006, the mortgage-backed securities (MBS) sold by [Fannie Mae] were considered solid investments.\" Unfortunately, however, not all borrowers whose loans had been purchased by Fannie Mae were able to repay their loans in a timely manner, and many ended up defaulting at some point. In fact, between roughly 2006 and 2008, many hundreds of thousands of people had defaulted on their mortgage loans, causing these securities to decreases significantly in value, thereby strongly impacting the global economy.\n",
    "\n",
    "On its website, Fannie Mae has made a subset of its single family loan performance (SFLP) data available to anyone interested in looking at it. The SFLP data cover the years 2000-2015, and can be downloaded here. The goal of this project it so see if we can predict from this data, with some accuracy, those borrowers who are most at risk of defaulting on their mortgage loans. Let's get started!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Cleaning the Data\n",
    "Once downloaded, one will find that the SFLP data dived into two relevant files called Acquisition*.txt and Performance*.txt, where the * is a wildcard placeholder for the particular year and quarter of interest. For the purposes of this project, we're using the quarter 4 data of 2007 which contains a reasonable number of defaults to analyze. The aquisition data contains personal information for each of the borrowers, including an individual's debt-to-income ratio, credit score, and loan amount, among several other things. The perfomance data contains information regarding loan payment history, and whether or not a borrower ended up defaulting on their loan. Additional information regarding the contents of these two files can be found in the Layout and Glossary of Terms files."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import roc_curve\n",
    "from sklearn.cross_validation import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.feature_selection import RFE\n",
    "from collections import Counter\n",
    "import seaborn as sns\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as mp\n",
    "%matplotlib inline\n",
    "\n",
    "columns = ['LoanID','Channel','SellerName','OrInterestRate','OrUnpaidPrinc','OrLoanTerm',\n",
    "        'OrDate','FirstPayment','OrLTV','OrCLTV','NumBorrow','DTIRat','CreditScore',\n",
    "        'FTHomeBuyer','LoanPurpose','PropertyType','NumUnits','OccStatus','PropertyState',\n",
    "        'Zip','MortInsPerc','ProductType','CoCreditScore','MortInsType'];\n",
    "\n",
    "df_acq = pd.read_csv('/Users/degravek/Downloads/Acquisition_2007Q4.txt', sep='|', names=columns)\n",
    "df_per = pd.read_csv('/Users/degravek/Downloads/Performance_2007Q4.txt', sep='|')\n",
    "\n",
    "df_def = df_per[df_per.iloc[:,15].notnull()]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After reading in the data, a new column called \"Default\" is added to the acquisition dataframe (df_acq). In this column, a 1 is placed next to any borrower that was found to have defaulted in the performance dataframe (df_per), and a 0 is placed next to any borrower that has not defaulted."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_acq['Default'] = np.nan\n",
    "df_acq.loc[df_acq.LoanID.isin(df_def.iloc[:,0]),'Default'] = 1\n",
    "df_acq.loc[df_acq.Default.isnull(), 'Default'] = 0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The two classes (default and no default) are extremely imbalanced here; defaulters make up only about 10% of all borrowers in this particular case. For very imbalanced data sets, it is often the case that machine learning algorithms will have a tendency to always predict the more dominant class when presented with new, unseen test data. To avoid this overabundance of false negatives, we can balance the classes so that the dataframe contains equal numbers of defaulters and non-defaulters. We do this by randomly sampling the non-defaulters n times, where n is the number of defaulters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Make classes balanced by undersampling non-defaulters, then concatenate dataframes\n",
    "# The no default case has been randomly sampled\n",
    "df_ydef = df_acq[df_acq.Default==1]\n",
    "df_ndef = df_acq[df_acq.Default==0].sample(n=len(df_ydef), random_state=0)\n",
    "\n",
    "df = df_ydef.append(df_ndef, ignore_index=True).reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's take a look at the dataframe header."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (<ipython-input-77-1d043bb2e299>, line 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-77-1d043bb2e299>\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    LoanID Channel                                 SellerName  0  100026162343       B                      BANK OF AMERICA, N.A.\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "df.head()\n",
    "\n",
    "         LoanID Channel                                 SellerName  \\\n",
    "0  100026162343       B                      BANK OF AMERICA, N.A.   \n",
    "1  100043973870       B                      BANK OF AMERICA, N.A.   \n",
    "2  100051174956       B  FIRST TENNESSEE BANK NATIONAL ASSOCIATION   \n",
    "3  100053457392       C       FLAGSTAR CAPITAL MARKETS CORPORATION   \n",
    "4  100059647383       C                      BANK OF AMERICA, N.A.   \n",
    "\n",
    "   OrInterestRate  OrUnpaidPrinc  OrLoanTerm   OrDate FirstPayment  OrLTV  \\\n",
    "0           6.875         108000         360  11/2007      01/2008     90   \n",
    "1           7.250         147000         360  08/2007      10/2007     90   \n",
    "2           5.625         204000         360  10/2007      12/2007     75   \n",
    "3           7.375         111000         360  08/2007      10/2007     75   \n",
    "4           6.625         159000         360  11/2007      12/2007     89   \n",
    "\n",
    "   OrCLTV   ...     PropertyType  NumUnits  OccStatus PropertyState  Zip  \\\n",
    "0    90.0   ...               SF         2          I            MO  631   \n",
    "1    90.0   ...               CO         1          I            IL  601   \n",
    "2    75.0   ...               CO         1          I            MA   21   \n",
    "3    93.0   ...               SF         1          S            TX  775   \n",
    "4    89.0   ...               SF         1          P            VA  244   \n",
    "\n",
    "  MortInsPerc  ProductType CoCreditScore MortInsType  Default  \n",
    "0        25.0          FRM         668.0         1.0      1.0  \n",
    "1        25.0          FRM           NaN         1.0      1.0  \n",
    "2         NaN          FRM           NaN         NaN      1.0  \n",
    "3         NaN          FRM         713.0         NaN      1.0  \n",
    "4        25.0          FRM         785.0         1.0      1.0 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The data contains additional information regarding loan interest rate, payment dates, property state, and the last few digits of the property zip code. Several of the columns contain missing values represented by NaN's. These will have to be filled in before we start making our predictions. Let's summarize the data in another way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-78-ad836442f105>, line 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-78-ad836442f105>\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    RangeIndex: 63752 entries, 0 to 63751\u001b[0m\n\u001b[0m              ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "df.info()\n",
    "\n",
    "RangeIndex: 63752 entries, 0 to 63751\n",
    "Data columns (total 25 columns):\n",
    "LoanID            63752 non-null int64\n",
    "Channel           63752 non-null object\n",
    "SellerName        63752 non-null object\n",
    "OrInterestRate    63752 non-null float64\n",
    "OrUnpaidPrinc     63752 non-null int64\n",
    "OrLoanTerm        63752 non-null int64\n",
    "OrDate            63752 non-null object\n",
    "FirstPayment      63752 non-null object\n",
    "OrLTV             63752 non-null int64\n",
    "OrCLTV            63746 non-null float64\n",
    "NumBorrow         63751 non-null float64\n",
    "DTIRat            61735 non-null float64\n",
    "CreditScore       63662 non-null float64\n",
    "FTHomeBuyer       63752 non-null object\n",
    "LoanPurpose       63752 non-null object\n",
    "PropertyType      63752 non-null object\n",
    "NumUnits          63752 non-null int64\n",
    "OccStatus         63752 non-null object\n",
    "PropertyState     63752 non-null object\n",
    "Zip               63752 non-null int64\n",
    "MortInsPerc       20001 non-null float64\n",
    "ProductType       63752 non-null object\n",
    "CoCreditScore     23018 non-null float64\n",
    "MortInsType       20001 non-null float64\n",
    "Default           63752 non-null float64\n",
    "dtypes: float64(9), int64(6), object(10)\n",
    "memory usage: 12.2+ MB"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that the dataframe contains 63,752 rows, and 25 columns. Looking at the third column in this list, there appears to be eight data columns that contain at least one NaN. These missing values can be handled in a number of ways; depending on the distribution of data in each column, we can fill in missing values with the column median or mean, or we could sample randomly from a distribution defined by the present values. We could also fit for the missing values using a machine learning algorithm applied to the complete columns, or we could drop the missing data altogether. Columns \"OrCLTV\", \"DTIRat\", \"CreditScore\", \"OrInterestRate\", and \"NumBorrow\" don't contain too many NaN's, so we could simply drop them from the analysis with little impact on the final results, but let's fill them in anyway just for fun. However, before doing so, we should first take a quick look at the distribution of values in each of these columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nCdZdAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x21bdc40f0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data = df[['OrCLTV','DTIRat','CreditScore','OrInterestRate','NumBorrow','Default']]\n",
    "\n",
    "fig, axes = mp.subplots(nrows=1, ncols=5, figsize=(8,2))\n",
    "mp.tight_layout(pad=0.1)\n",
    "\n",
    "fs = 8\n",
    "columns = data.columns\n",
    "for i, column in zip(range(1,5), data.columns):\n",
    "    mp.subplot(1,4,i)\n",
    "    sns.distplot(data.loc[data['Default'] == 0, column].dropna(), kde=False)\n",
    "    sns.distplot(data.loc[data['Default'] == 1, column].dropna(), kde=False)\n",
    "    mp.xlabel(column, fontsize=fs)\n",
    "    mp.xticks(fontsize=fs)\n",
    "    mp.yticks(fontsize=fs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In these figures, the green histograms represent the default class, while the blue histograms represent the non-default class. The various distributions are clearly non-Gaussian, and so simply filling in missing values with the mean may not be appropriate. As such (and for simplicity) we will fill in the missing values with the column median, which is more appropriate for skewed distributions. The \"NumBorrow\" column takes on only six finite values, and so here we fill in missing data with the most common value, rather than the median. It is worth noting that some experimentation suggests fitting for values in these columns (or even using the column mean rather than the median) actually has a negligible effect on the final classification later. Interestingly, the disparity in values between the two classes seems largest for the DTI (debt-to-income ratio) and credit score columns. Let's take a closer look at these features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x1597b06a0>"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x258fa0ef0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = mp.subplots(nrows=1, ncols=2)\n",
    "mp.tight_layout(pad=2)\n",
    "\n",
    "mp.subplot(1,2,1)\n",
    "sns.boxplot(x=\"Default\", y=\"DTIRat\", data=data)\n",
    "mp.ylabel('Debt-to-Income Ratio')\n",
    "\n",
    "mp.subplot(1,2,2)\n",
    "sns.boxplot(x=\"Default\", y=\"CreditScore\", data=data)\n",
    "mp.ylabel('Credit Score')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The figures above show boxplots of debt-to-income ratio and borrower credit score. The green boxes (and whiskers) show the distribution of values spanned by the default class, while the puprple boxes show the values spanned by the non-default class. Boxplots are assembled such that 25% of the data values are contained between the lowest whisker and the bottom of the box, 50% of the values are contained within the box itself, and 25% of the values are spanned between the top of the box and the top whisker. The median value of the data is represented by the horizontal line in the middle of the box. On average, defaulters have a higher debt-to-income ratio than do non-defaulters, and they also have lower credit scores. Interestingly, in looking at the various data features, the borrower's location (ZIP code) also seems to be a strong indicator of whether or not a default will occur. The figure below shows the fraction of people who have defaulted from the ten most common ZIP codes with more than 500 borrowers. In certain locations (for example, ZIP code 891), over 80% of borrowers defaulted. We will see shortly that these are a few of the most discriptive features in terms of identifying which class a borrower belongs to."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x1e6029390>"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1f4e69c88>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data = df.loc[df['Zip'].isin(df['Zip'].value_counts().index.tolist()[:10])]\n",
    "\n",
    "ptab = pd.pivot_table(data, index='Zip', columns='Default', aggfunc='size')\n",
    "ptab = ptab.div(ptab.sum(axis=1), axis=0)\n",
    "ptab.plot.barh(stacked=True, figsize=(6,4))\n",
    "mp.legend(loc='center left', bbox_to_anchor=(1.0, 0.5))\n",
    "mp.xlabel('Fraction of Borrowers')\n",
    "mp.ylabel('ZIP Code')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we've explored the data a little bit, let's fill in those missing values. This is done easily using the Pandas fillna function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df['OrCLTV'].fillna(df['OrCLTV'].median(), inplace=True)\n",
    "df['DTIRat'].fillna(df['DTIRat'].median(), inplace=True)\n",
    "df['CreditScore'].fillna(df['CreditScore'].median(), inplace=True)\n",
    "df['OrInterestRate'].fillna(df['OrInterestRate'].median(), inplace=True)\n",
    "\n",
    "count = Counter(df.loc[df['NumBorrow'].notnull(), 'NumBorrow'])\n",
    "tmp = count.most_common()[0][0]\n",
    "df['NumBorrow'] = df['NumBorrow'].fillna(tmp)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can perform one last preprocessing step and split up any date columns into their month and year components, just in case they might have some predictive power."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df['OrDateMonth'] = np.nan\n",
    "df['OrDateMonth'] = df['OrDate'].apply(lambda x: x.split('/')[0].strip()).astype(int)\n",
    "\n",
    "df['OrDateYear'] = np.nan\n",
    "df['OrDateYear'] = df['OrDate'].apply(lambda x: x.split('/')[1].strip()).astype(int)\n",
    "\n",
    "df['FirstMonth'] = np.nan\n",
    "df['FirstMonth'] = df['FirstPayment'].apply(lambda x: x.split('/')[0].strip()).astype(int)\n",
    "\n",
    "df['FirstYear'] = np.nan\n",
    "df['FirstYear'] = df['FirstPayment'].apply(lambda x: x.split('/')[1].strip()).astype(int)\n",
    "\n",
    "df = df.drop(['OrDate','FirstPayment'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before we try and predict loan defaulters, we must ensure that all columns in the dataframe are numerical (i.e., no strings present). To do this quickly, the dataframe categorical variables are isolated by identifying any columns with the \"object\" data type. We loop over each of these columns, and use the Pandas get_dummies function to convert them to numerical values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_cat = df.select_dtypes(include=['object'])\n",
    "df_num = df.drop(df_cat.columns, axis=1)\n",
    "\n",
    "data = pd.DataFrame()\n",
    "for i in df_cat.columns:\n",
    "    tmp = pd.get_dummies(df_cat[i])\n",
    "    data = pd.concat([data, tmp], axis=1)\n",
    "\n",
    "df_new = pd.concat([df_num, data], axis=1).reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One may note that columns \"MortInsPerc\", \"MortInsType\", and \"CoCreditScore\" still contain missing values (many of them!). In fact, they contain so many missing values that trying to fill them accurately may just result in additional noise being added to the data. To this end, we simply drop these columns from the dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_new.drop(['MortInsPerc','MortInsType','CoCreditScore'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Predicting Bad Loans\n",
    "Okay, now we're ready to make some predictions! We first randomly split the data into a training set and a test set using the Scikit-Learn train_test_split_function. From these two sets, we idenfiy the target (Default) vector, and feature arrays. We then initialize the RandomForestClassifier composed of 200 random decision trees, fit it to the training data, and then predict the test set classes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_train, df_test = train_test_split(df_new, test_size = 0.25, random_state=0)\n",
    "df_train = df_train.reset_index(drop=True)\n",
    "df_test  = df_test.reset_index(drop=True)\n",
    "\n",
    "df_targ_train = df_train['Default']\n",
    "df_feat_train = df_train.drop(['Default','LoanID'], axis=1)\n",
    "\n",
    "df_targ_test = df_test['Default']\n",
    "df_feat_test = df_test.drop(['Default','LoanID'], axis=1)\n",
    "\n",
    "targ_train = df_targ_train.values\n",
    "feat_train = df_feat_train.values\n",
    "\n",
    "targ_test = df_targ_test.values\n",
    "feat_test = df_feat_test.values\n",
    "\n",
    "model = RandomForestClassifier(n_estimators=200)\n",
    "model = model.fit(feat_train,targ_train)\n",
    "predict = model.predict(feat_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can evaluate the perfomance of our classifier by examining the resulting confusion matrix. The confusion matrix is a table which shows the percentage of correct and incorrect classifications (false positives or false negatives) for each positive (default) or negative (non-default) class. In the table below, the true class is given along the x-axis, while the predicted class is given along the y-axis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-87-e59a74c659cb>, line 7)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-87-e59a74c659cb>\"\u001b[0;36m, line \u001b[0;32m7\u001b[0m\n\u001b[0;31m    Actual          0.0       1.0\u001b[0m\n\u001b[0m                      ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "y_actu = pd.Series(targ_test, name='Actual')\n",
    "y_pred = pd.Series(predict, name='Predicted')\n",
    "df_conf1 = pd.crosstab(y_pred, y_actu)\n",
    "df_conf2 = df_conf1/df_conf1.sum(axis=0)\n",
    "print(df_conf2)\n",
    "\n",
    "Actual          0.0       1.0\n",
    "Predicted                    \n",
    "0.0        0.695582  0.239213\n",
    "1.0        0.304418  0.760787"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The confusion matrix shows that for all of the defaulters in our data set, we are able to correctly identify them about 76% of the time (these are true positives). On the other hand, our algorithm incorrectly labels defaulters as being non-defaulters about 24% of the time (these are false negatives). However, this is not too bad! Since roughly 10% of the original data set was composed of the default class (before balancing the data), simply always predicting a non-default for all borrowers would result in a misclassification of defaulters 10% of the time. We see now, though, that our algorithm is able to identify defaulters 76% of the time, which means we have reduced the misclassification error from 10% to 2.2%!\n",
    "\n",
    "Similarly, for all non-defaulters in our data set, the algorithm incorrectly labels them as defaulters about 30% of the time (these are false positives). In terms of profitability to Fannie Mae, however, false negatives are much more important. This is because Fannie Mae loses money when we incorrectly label a defaulter as being a non-defaulter. The fact that we incorrectly classify some of our non-defaulters is of little consequence, though, because there are so many of them present in the full data set (we can always find more non-defaulters easily enough).\n",
    "\n",
    "One may point out that both our training and test sets have been balanced before analysis, and wonder if this predictive capability holds up when the algorithm is presented with new, very imbalanced data. It turns out that this is in fact still the case. Some additional testing suggests that rates of false positives and false negatives are nearly identical to those given above.\n",
    "\n",
    "To further visualize the performance of our classifier, we can look at the corresponding receiver operating characteristics (ROC) curve. The ROC curve shows the number of true positives vs. the number of false positives labeled by the algorithm for a number of threshold values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x151460be0>"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a1c046d8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fpr, tpr, thresholds = roc_curve(targ_test,model.predict_proba(feat_test)[:,1])\n",
    "fig = mp.figure(figsize=(5,5), dpi=100)\n",
    "mp.plot(fpr,tpr,'-r')\n",
    "mp.plot([0, 1], [0, 1], 'k--')\n",
    "mp.xlabel('False Positive Rate')\n",
    "mp.ylabel('True Positive Rate')\n",
    "mp.title('Random Forest ROC')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the case of a perfect classifier, the ROC curve would hug the top left corver of the figure (the true positive rate would be 1.0, and the false positive rate would be 0.0). The black dashed curve represents a classifier with no predictive power. We see that in our case, the random forest does a pretty good job; it clearly has predictive capabilities, but of course is not perfect.\n",
    "\n",
    "The random forest classifier is unique in that it allows one to identify directly those features in the dataframe that were most important in correctly predicting the positive and negative classes. Let's take a look at the top 10 most important features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), <a list of 10 Text xticklabel objects>)"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nGGRYK2jnAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1b5b92240>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "feat_labels = df_feat_train.columns\n",
    "importances = model.feature_importances_\n",
    "indices = np.argsort(importances)[::-1]\n",
    "\n",
    "fig = mp.figure(figsize=(5,3.5))\n",
    "sns.barplot(x=feat_labels[indices[:ncomp]], y=importances[indices[:ncomp]], color='deepskyblue')\n",
    "mp.title('Top 10 Feature Importances')\n",
    "mp.ylabel('Relative Feature Importance')\n",
    "mp.xticks(rotation=90)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we saw earlier, of all the available features, it looks like borrower credit score, ZIP code, and debt-to-income ratio are among the most predictive. It also appears that reasonably good predictions could be made using only the first seven features or so. This sort of analysis of feature importances would be useful for dimensionality reduction if we had many hundreds of features in our dataframe."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Minimizing False Negatives\n",
    "Though we've seen that our algorithm appears to perform reasonably well, there is definitely still some room for improvement. Let's see if we can decrease the number of false negatives even further by using a different algorithm - a naive Bayes classifier. When using other classifiers, it is usually the case that the feature array must first be scaled so that values take on similar ranges. This can be done quickly using the the StandardScaler function, and is applied using a call to fit_transform. Let's fit the naive Bayes classifier (GaussianNB) on the training data, and then predict using the test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-90-535877f4b31e>, line 16)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-90-535877f4b31e>\"\u001b[0;36m, line \u001b[0;32m16\u001b[0m\n\u001b[0;31m    Actual          0.0       1.0\u001b[0m\n\u001b[0m                      ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "sc = StandardScaler()\n",
    "\n",
    "feat_train_std = sc.fit_transform(feat_train)\n",
    "feat_test_std  = sc.fit_transform(feat_test)\n",
    "\n",
    "model = GaussianNB()\n",
    "model = model.fit(feat_train_std, targ_train)\n",
    "\n",
    "predict = model.predict(feat_test_std)\n",
    "y_actu = pd.Series(targ_test, name='Actual')\n",
    "y_pred = pd.Series(predict, name='Predicted')\n",
    "df_conf1 = pd.crosstab(y_pred,y_actu)\n",
    "df_conf2 = df_conf1/df_conf1.sum(axis=0)\n",
    "print(df_conf2)\n",
    "\n",
    "Actual          0.0       1.0\n",
    "Predicted                    \n",
    "0.0        0.419335  0.178299\n",
    "1.0        0.580665  0.821701"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at the resulting confusion matrix, we can see that we have significantly reduced the false negative rate to about 18% over the random forest classifier. This translates to a final misclassification rate of about 1.7%. This is much better than simply predicting the non-default class for all borrowers! It is worth noting, though, that the false positive rate for the negative class is also now much worse than before (about 58% now instead of 30% with the random forest classifier). Again, however, this is a small price to pay for significantly reducing the false negative rate; remember, it is the false negatives that cost us money in the end!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Concluding Remarks\n",
    "In this project, we've detailed how to predict bad loans Fannie Mae single family loan performance data. The random forest classifier gave us a nice baseline algorithm by which we could identify loan defaulters with reasonably good accuracy. We also found that the false negative rate could be significantly reduced by switching to a different (naive Bayes) classifier.\n",
    "\n",
    "A number of tests could be conducted to try and further improve the analysis. For example, one could find the optimal number of estimators (trees) to use in the initial random forest classification. A value of 200 was shown to perform quite well, but could be tuned to give an even better performance. We could also compare a number of different tuned algorithms like logistic regression or k-nearest neighbors to see how these perform relative to the two algorithms used in this work.\n",
    "\n",
    "Well, that's all I have for now. Thanks for following along!"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
